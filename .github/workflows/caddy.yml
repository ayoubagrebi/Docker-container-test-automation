name: postgres-test  # Replace with a descriptive name if needed

on:
  push:
    branches: [ main ]  # You can adjust the branches to trigger on

jobs:
  test_postgres:
    runs-on: ubuntu-latest  # Adjust runner OS if needed

    services:
      db:
        image: postgres:alpine
        # Health check logic can be implemented using environment variables or a separate script (refer to Docker documentation)
        # healthcheck:  # Commented out as 'healthcheck' is not a standard key
        #   test: ["CMD", "pg_isready", "-q", "-U", "postgres"]
        #   interval: 5s
        #   timeout: 1s
        #   retries: 2
        # Removed 'restart' key as it's not directly supported within workflow service definition
        env:  # Define environment variables explicitly here (if needed)
          POSTGRES_USER: postgres  # Replace with your actual username
          POSTGRES_PASSWORD: my_password  # Replace with your actual password
        volumes:
          - wallet-api-db:/waltid-wallet-api/data/postgresql  # Adjust volume paths if needed
          - ./db-init.sh:/docker-entrypoint-initdb.d/db-init.sh  # Adjust script path if needed
        ports:
          - '5432:5432'

    steps:
      - uses: actions/checkout@v3

      - name: Wait for PostgreSQL to be ready
        run: |
          until psql -h 127.0.0.1 -p 5432 -U postgres -f /dev/null; do
            echo "Waiting for PostgreSQL service to be ready..."
            sleep 5
          done
          echo "PostgreSQL service is healthy."

      - name: Verify PostgreSQL connection from host
        run: |
          echo "Connecting to PostgreSQL..."
          psql -h 127.0.0.1 -p 5432 -U postgres -f /dev/null

      - name: Display PostgreSQL container logs
        run: |
          db_container_id=${{ job.services.db.id }}
          docker logs $db_container_id

      - name: Run your PostgreSQL tests (replace with your actual tests)
        run: |
          # Replace with your specific test commands (e.g., pg_dump, custom scripts)
          echo "Running PostgreSQL tests..."
          # Your test commands go here

      - name: Stop containers  # Optional step to stop and remove containers after tests
        run: |
          docker stop ${{ job.services.db.id }}
          docker rm ${{ job.services.db.id }}
